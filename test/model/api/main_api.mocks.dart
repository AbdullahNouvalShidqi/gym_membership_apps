// Mocks generated by Mockito 5.2.0 from annotations
// in gym_membership_apps/test/model/api/main_api.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dio/src/dio.dart' as _i2;
import 'package:gym_membership_apps/model/api/main_api.dart' as _i5;
import 'package:gym_membership_apps/model/article_model.dart' as _i8;
import 'package:gym_membership_apps/model/book_model.dart' as _i9;
import 'package:gym_membership_apps/model/class_model.dart' as _i3;
import 'package:gym_membership_apps/model/home_class_model.dart' as _i7;
import 'package:gym_membership_apps/model/user_model.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDio_0 extends _i1.Fake implements _i2.Dio {}

class _FakeClassModel_1 extends _i1.Fake implements _i3.ClassModel {}

class _FakeUserModel_2 extends _i1.Fake implements _i4.UserModel {}

/// A class which mocks [MainAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainAPI extends _i1.Mock implements _i5.MainAPI {
  MockMainAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: '') as String);
  @override
  String get url2 =>
      (super.noSuchMethod(Invocation.getter(#url2), returnValue: '') as String);
  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio_0())
          as _i2.Dio);
  @override
  _i6.Future<List<_i3.ClassModel>> getAllClass({String? type}) =>
      (super.noSuchMethod(Invocation.method(#getAllClass, [], {#type: type}),
              returnValue:
                  Future<List<_i3.ClassModel>>.value(<_i3.ClassModel>[]))
          as _i6.Future<List<_i3.ClassModel>>);
  @override
  _i6.Future<_i3.ClassModel> getClassById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getClassById, [], {#id: id}),
              returnValue: Future<_i3.ClassModel>.value(_FakeClassModel_1()))
          as _i6.Future<_i3.ClassModel>);
  @override
  _i6.Future<List<_i7.HomeClassModel>> getHomeClass() => (super.noSuchMethod(
          Invocation.method(#getHomeClass, []),
          returnValue:
              Future<List<_i7.HomeClassModel>>.value(<_i7.HomeClassModel>[]))
      as _i6.Future<List<_i7.HomeClassModel>>);
  @override
  _i6.Future<List<_i8.ArticleModel>> getArticles() =>
      (super.noSuchMethod(Invocation.method(#getArticles, []),
              returnValue:
                  Future<List<_i8.ArticleModel>>.value(<_i8.ArticleModel>[]))
          as _i6.Future<List<_i8.ArticleModel>>);
  @override
  _i6.Future<List<_i4.UserModel>> getAllUser() =>
      (super.noSuchMethod(Invocation.method(#getAllUser, []),
              returnValue: Future<List<_i4.UserModel>>.value(<_i4.UserModel>[]))
          as _i6.Future<List<_i4.UserModel>>);
  @override
  _i6.Future<void> updatePassword({int? id, String? newPassword}) =>
      (super.noSuchMethod(
          Invocation.method(
              #updatePassword, [], {#id: id, #newPassword: newPassword}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<_i4.UserModel> getUserById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getUserById, [], {#id: id}),
              returnValue: Future<_i4.UserModel>.value(_FakeUserModel_2()))
          as _i6.Future<_i4.UserModel>);
  @override
  _i6.Future<_i4.UserModel> signUp(
          {String? username,
          String? email,
          String? contact,
          String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signUp, [], {
                #username: username,
                #email: email,
                #contact: contact,
                #password: password
              }),
              returnValue: Future<_i4.UserModel>.value(_FakeUserModel_2()))
          as _i6.Future<_i4.UserModel>);
  @override
  _i6.Future<void> bookClass({int? classId, int? idUser}) =>
      (super.noSuchMethod(
          Invocation.method(
              #bookClass, [], {#classId: classId, #idUser: idUser}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<List<_i9.BookModel>> getSchedulesById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getSchedulesById, [], {#id: id}),
              returnValue: Future<List<_i9.BookModel>>.value(<_i9.BookModel>[]))
          as _i6.Future<List<_i9.BookModel>>);
}
